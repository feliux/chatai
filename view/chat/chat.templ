package chat

import (
	"time"
	"fmt"

	app "github.com/feliux/chatai/view/app"
)

templ Index() {
	@app.App(true) {
		<div class="flex w-full h-full">
			@MobileInterface()
		</div>
	}
}

templ MobileInterface() {
	<div class="mockup-phone border-secondary bg-base-800">
		<div class="camera"></div>
		<div class="display">
			<div class="artboard artboard-demo phone-1 bg-base-200">
				<div class="w-full h-[400px]">
					@Chat()
				</div>
			</div>
		</div>
	</div>
}

templ Chat() {
	<div hx-ext="ws" ws-connect="/ws">
		<div id="chat_room"></div>
		<form id="form" ws-send>
			// <input name="chat_message"/>
			<input name="chat_message" type="text" placeholder="Type here" class="input input-bordered input-secondary w-full max-w-xs"/>
			// <button type="submit">send</button>
			<button type="submit" class="btn btn-outline btn-secondary w-full">
				<i class="fa-solid fa-child-dress"></i> Send message
			</button>
		</form>
	</div>
}

// templ Hub() {
// 	<div hx-ext="ws" ws-connect="/ws">
// 		<div class="flex bg-gray-100 p-4">
// 			<ul id="chat_room" hx-swap="beforeend" hx-swap-oob="beforeend"></ul>
// 		</div>
// 		<form id="form" ws-send hx-reset-on-success>
// 			//   <input name="text" type="text" class="border-2 border-gray-300 p-2" placeholder="Type your message">
// 			//   <button type="submit" class="bg-blue-500 text-white px-4 py-2">Send</button>
// 			<input name="text" type="text" placeholder="Type here" class="input input-bordered input-secondary w-full max-w-xs"/>
// 			<button type="submit" class="btn btn-outline btn-secondary w-full">
// 				<i class="fa-solid fa-child-dress"></i> Send message
// 			</button>
// 		</form>
// 	</div>
// }

// templ Message(message types.Message) {
// 	<div id="chat_room" hx-swap-oob="beforeend">
// 		<li id="message" class="flex  my-2">
// 			<h1 class="text-base font-bold mr-2 text-red-500">{ message.ClientID }</h1>
// 			<p class="text-base">{ message.Text }</p>
// 		</li>
// 	</div>
// }

// templ ChatMessage(message string) {
// // 		<div hx-swap-oob="beforeend:#chat_room" class="chat chat-start">
// 	<div hx-swap-oob="beforeend:#chat_room" class="chat chat-start">
// 		<div class="chat-header">
// 			Obi-Wan Kenobi
// 			<time class="text-xs opacity-50">12:45</time>
// 		</div>
// 		<div class="chat-bubble">You were the Chosen One!</div>
// 	</div>
// 	<div hx-swap-oob="beforeend:#chat_room" class="chat chat-end">
// 		<div class="chat-header">
// 			Anakin
// 			<time class="text-xs opacity-50">12:46</time>
// 		</div>
// 		<div class="chat-bubble">I hate you!</div>
// 	</div>
// }

// templ ChatPerson(message string, user string) {
// 	if user == "system" {
// 		<div hx-swap-oob="beforeend:#chat_room" class="chat chat-start">
// 			@ChatMessage(message, user)
// 		</div>
// 	} else if user == "user" {
// 		<div hx-swap-oob="beforeend:#chat_room" class="chat chat-end">
// 			@ChatMessage(message, user)
// 		</div>
// 	}
// }

// templ ChatMessage(message string, user string) {
// 	<div class="chat-image avatar">
// 		//     <div hx-swap-oob="beforeend:#chat_room">
// 		<div class="w-10 rounded-full">
// 			<img
// 				alt="Tailwind CSS chat bubble component"
// 				src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg"
// 			/>
// 		</div>
// 	</div>
// 	<div class="chat-header">
// 		{ user } // display user name
// 		<time class="text-xs opacity-50">
// 			{ formatTime() } // display time
// 		</time>
// 	</div>
// 	<div class="chat-bubble">
// 		{ message } // display message data
// 	</div>
// 	<div class="chat-footer opacity-50">
// 		if user == "system" {
// 			Delivered at { formatTime() } // system footer message
// 		} else if user == "user" {
// 			Seen at { formatTime() } // user footer message
// 		}
// 	</div>
// }

templ ChatMessage(message string) {
    <div hx-swap-oob="beforeend:#chat_room">
        <div>
            { message }
        </div>
    </div>
}

templ SentAndRecv(sent string, recv string) {
	@ChatMessage(fmt.Sprintf("User: %s", sent))
	@ChatMessage(fmt.Sprintf("Bot: %s", recv))
}

func formatTime() string {
	return time.Now().Format("15:04")
}
